---
description:
globs:
alwaysApply: false
---
# Summary

该项目是一个基于[wxt framework](mdc:https:/wxt.dev)的chrome extension（chrome浏览器扩展）。

## 业务需求

- tearline官网：
  tearline官网的域名`TEARLINE_WEBSITE`定义在 [settings.ts](mdc:entrypoints/common/settings.ts)

- 这个浏览器扩展在管理用户登入登出状态的时候能够和官网的登入登出操作完全同步：
  - 监听到用户从官网登出，则扩展自动登出
  - 监听到用户从官网登入，则扩展自动登入
  - 如果用户在扩展内登出，则官网自动登出
  - 如果用户在扩展内登入，那么需要跳转到官网进行登入。

- 所有想要使用该插件的用户都必须先登录才能使用：
  - 登入的入口有两个：
    - sidepanel：如果用户未登入的话则显示LoginPrompt要求用户登入。
    - option：account setting中允许用户进行登入/登出操作。
  - 无论从哪个入口进行登入都需要保证登录状态一致。

## 核心调用逻辑

位于以下文件：
- entrypoints/options/
  - [App.tsx](mdc:entrypoints/options/App.tsx)
- entrypoints/sidepanel/
  - [main.tsx](mdc:entrypoints/sidepanel/main.tsx)

## 核心实现逻辑

位于以下文件：
- entrypoints/auth/
  - [authService.ts](mdc:entrypoints/auth/authService.ts)
  - [useAuth.ts](mdc:entrypoints/auth/useAuth.ts)
  - [models.ts](mdc:entrypoints/auth/models.ts)
- entrypoints/
  - [background.ts](mdc:entrypoints/background.ts)
  - [content.ts](mdc:entrypoints/content.ts)
  - [injectScript.ts](mdc:entrypoints/injectScript.ts)
    - injectScript.ts 脚本被注入到 Tearline 官网页面中，可以监控网站的 localStorage。当用户在官网登出时，官网会清除 localStorage 中的身份验证数据，injectScript.ts 能检测到这一变化并通知扩展。

# 身份验证逻辑和流程分析

## 核心组件

### 1. 身份验证设置
- `TEARLINE_WEBSITE` 在 `settings.ts` 中定义
- `AUTHINFO_KEY` 用作存储身份验证数据的键名

### 2. 身份验证模型
在 `models.ts` 中：
- 使用 XState 进行状态管理，状态包括：NONE, PENDING, SUCCESS, ERROR
- 定义了身份验证数据和消息类型的接口

### 3. 身份验证服务
在 `authService.ts` 中：
- 集中管理 `chrome.storage.local` 中的身份验证数据
- 提供获取、设置和清除身份验证信息的方法
- 检查令牌过期并处理令牌刷新逻辑
- 向扩展组件广播登录状态

### 4. React 身份验证钩子
在 `useAuth.ts` 中：
- 为 UI 组件提供身份验证功能的 React 钩子
- 管理身份验证状态和用户信息
- 处理登录和登出操作
- 通过消息传递监听身份验证状态变化

## 身份验证流程

1. **初始检查**：
   - 启动时，扩展从 `chrome.storage.local` 检索身份验证信息，检查用户是否已登录
   - 验证令牌是否存在且未过期

2. **登录过程**：
   - 当用户点击"使用 Tearline 登录"按钮时：
     - 身份验证状态变为"PENDING"
     - 扩展打开新标签页到 `https://${TEARLINE_WEBSITE}/#`
     - 设置超时（120秒）处理登录超时

3. **身份验证数据捕获**：
   - 当用户在 Tearline 网站登录时：
     - `injectScript.ts` 监控网站的 localStorage
     - 当在 localStorage 中检测到身份验证数据时，通过 `window.postMessage` 将其发送到内容脚本
     - `content.ts` 验证消息来源并转发到后台脚本
     - `background.ts` 解析并使用 `authService` 存储身份验证数据
     - 向所有扩展组件广播身份验证状态

4. **身份验证状态管理**：
   - 身份验证状态在 `chrome.storage.local` 中维护以保持持久性
   - UI 组件（选项页面和侧边栏）根据身份验证状态呈现适当的视图：
     - Not logged in → Login prompt
     - Pending → Loading indicator
     - Error → Error message with retry option
     - Success → Main application UI

5. **登出过程**：
   - 触发登出时：
     - 清除存储中的身份验证数据
     - 向所有组件广播登出状态
     - UI 恢复到登录提示

6. **令牌刷新**：
   - 扩展定期检查令牌是否需要刷新
   - 如果需要刷新（过期前15分钟），它会尝试刷新令牌

这种实现利用了 Tearline 网站的现有身份验证系统，而不是在扩展中实现单独的身份验证机制。

`authStateMachine` 是一个使用 XState 库创建的有限状态机，用于管理用户认证状态。以下是它的工作原理：

### 状态机的组成部分

1. **状态 (States)**:
   - `NONE`: 初始状态，表示用户未登录。
   - `PENDING`: 表示正在进行登录操作。
   - `SUCCESS`: 表示用户已成功登录。
   - `ERROR`: 表示登录过程中发生错误。

2. **事件 (Events)**:
   - `LOGIN`: 触发登录操作。
   - `LOGIN_SUCCESS`: 登录成功。
   - `LOGIN_ERROR`: 登录失败。
   - `LOGOUT`: 用户登出。

3. **状态转换 (Transitions)**:
   - 从 `NONE` 状态可以转换到 `PENDING` 或 `SUCCESS` 状态。
   - 从 `PENDING` 状态可以转换到 `SUCCESS` 或 `ERROR` 状态。
   - 从 `SUCCESS` 状态可以转换到 `NONE` 状态。
   - 从 `ERROR` 状态可以转换到 `PENDING` 或 `NONE` 状态。

### 工作流程

- **初始化**: 状态机从 `NONE` 状态开始。
- **登录过程**:
  - 当接收到 `LOGIN` 事件时，状态从 `NONE` 转换到 `PENDING`。
  - 如果登录成功，接收到 `LOGIN_SUCCESS` 事件，状态从 `PENDING` 转换到 `SUCCESS`。
  - 如果登录失败，接收到 `LOGIN_ERROR` 事件，状态从 `PENDING` 转换到 `ERROR`。
- **登出过程**:
  - 无论当前状态是 `SUCCESS` 还是 `ERROR`，接收到 `LOGOUT` 事件后，状态都会转换到 `NONE`。

### 状态机的使用

- `authStateMachineActor` 是通过 `createActor` 方法创建的状态机实例，并在创建时立即启动。
- 通过 `authStateMachineActor.send(event)` 方法，可以向状态机发送事件，触发状态转换。
- 通过订阅状态机的变化，可以在状态改变时执行相应的逻辑，比如更新 UI。

这种状态机设计使得认证状态的管理更加清晰和可预测，便于维护和扩展。

状态机与实际登录状态的配合通过以下几个步骤实现：

1. **状态初始化**:
   - 在应用启动时，`useAuth` 钩子会调用 `loadAuthStatus` 函数。
   - `loadAuthStatus` 检查 `chrome.storage.local` 中的认证信息，判断用户是否已登录。

2. **状态更新**:
   - 如果用户已登录，`loadAuthStatus` 会发送 `LOGIN_SUCCESS` 事件给状态机，将状态更新为 `SUCCESS`。
   - 如果用户未登录或认证信息无效，状态机会保持在 `NONE` 状态。

3. **登录过程**:
   - 当用户尝试登录时，`handleLogin` 函数会被调用。
   - `handleLogin` 会发送 `LOGIN` 事件给状态机，将状态更新为 `PENDING`。
   - 登录成功后，`injectScript.ts` 会检测到 localStorage 中的认证信息变化，并通过消息传递机制通知扩展。
   - 扩展接收到登录成功的消息后，会调用 `loadAuthStatus`，再次检查认证信息，并发送 `LOGIN_SUCCESS` 事件给状态机。

4. **登出过程**:
   - 当用户登出时，`handleLogout` 函数会被调用。
   - `handleLogout` 会清除 `chrome.storage.local` 中的认证信息，并发送 `LOGOUT` 事件给状态机，将状态更新为 `NONE`。

5. **状态监听**:
   - 通过订阅状态机的变化，应用可以在状态改变时更新 UI，比如显示登录按钮或用户信息。

这种设计确保了状态机的状态与实际的登录状态保持一致，并通过事件驱动的方式实现了状态的自动更新和 UI 的同步。

### 1. **状态管理的清晰性**

状态机将认证过程中的每一个状态明确地定义出来，包括 `NONE`、`PENDING`、`SUCCESS` 和 `ERROR`。每个状态都有明确的含义：

- `NONE`: 用户未登录。
- `PENDING`: 用户正在进行登录操作。
- `SUCCESS`: 用户已成功登录。
- `ERROR`: 登录过程中发生错误。

通过这种方式，状态机使得状态管理变得更加清晰和可预测。

### 2. **状态转换的可控性**

状态机定义了从一个状态到另一个状态的转换规则（即状态转换）。例如：

- 从 `NONE` 状态可以转换到 `PENDING` 或 `SUCCESS` 状态。
- 从 `PENDING` 状态可以转换到 `SUCCESS` 或 `ERROR` 状态。
- 从 `SUCCESS` 状态可以转换到 `NONE` 状态。
- 从 `ERROR` 状态可以转换到 `PENDING` 或 `NONE` 状态。

这种明确的转换规则确保了状态只能按照预期的路径进行变化，避免了状态的混乱。

### 3. **事件驱动的状态变化**

状态机通过事件来驱动状态的变化。例如：

- 当用户开始登录时，触发 `LOGIN` 事件，状态从 `NONE` 转换到 `PENDING`。
- 当登录成功时，触发 `LOGIN_SUCCESS` 事件，状态从 `PENDING` 转换到 `SUCCESS`。
- 当登录失败时，触发 `LOGIN_ERROR` 事件，状态从 `PENDING` 转换到 `ERROR`。
- 当用户登出时，触发 `LOGOUT` 事件，状态从 `SUCCESS` 或 `ERROR` 转换到 `NONE`。

这种事件驱动的机制使得状态变化更加灵活和可控。

### 4. **与实际登录状态的同步**

状态机与实际的登录状态保持同步。通过 `useAuth` 钩子中的逻辑，状态机会根据实际的登录状态（如 `chrome.storage.local` 中的认证信息）来更新自身的状态。

- 在应用启动时，`loadAuthStatus` 会检查用户的登录状态，并相应地更新状态机的状态。
- 在用户登录或登出时，状态机会根据事件来更新状态。

### 5. **UI 的同步更新**

通过订阅状态机的变化，应用可以在状态改变时更新 UI。例如：

- 当状态变为 `SUCCESS` 时，UI 显示用户信息。
- 当状态变为 `NONE` 时，UI 显示登录按钮。

这种设计确保了 UI 始终与用户的认证状态保持一致。

通过以上这些机制，状态机在认证状态管理中发挥了重要作用，使得状态管理更加清晰、可控和易于维护。
